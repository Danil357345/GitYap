Python Codebase Outline:

chat.html.py:
- Main purpose: Generates HTML chat interface
- Key functions:
  - generate_chat_html(): Creates chat page with messages
  - process_file(): Processes message files
  - extract_metadata(): Gets author/hashtags from messages
  - get_available_channels(): Lists chat channels
- Dependencies: os, re, datetime, chardet
- Used by: http_handler.py for serving chat pages

commit_files.py:
- Main purpose: Git integration for message storage
- Key functions:
  - commit_text_files(): Commits messages to git
  - calculate_file_hash(): Creates file checksums
  - extract_metadata(): Gets message metadata
  - store_metadata(): Saves metadata as JSON
- Dependencies: git, os, subprocess
- Used by: http_handler.py for message persistence

compile_prompt.py:
- Main purpose: Generates prompts for AI model
- Key functions:
  - compile_prompt(): Creates prompt files
  - get_file_stats(): Analyzes file metrics
  - format_file_content(): Formats code for prompts
- Dependencies: os, re
- Used by: Development tools

config.py:
- Main purpose: Configuration constants
- Defines:
  - SCRIPT_TYPES: Supported script extensions
  - INTERPRETERS: Script interpreter mapping
  - MIME_TYPES: File type mappings
- Used by: http_handler.py, server.py

file_operations.py:
- Main purpose: File system operations
- Key functions:
  - setup_static_files(): Copies static assets
  - find_scripts(): Locates script files
- Dependencies: os, shutil
- Used by: http_handler.py

file_utils.py:
- Main purpose: File handling utilities
- Key functions:
  - read_file_safe(): Safe file reading
  - write_file_safe(): Safe file writing
- Dependencies: os, chardet
- Used by: Multiple files for file I/O

http_handler.py:
- Main purpose: HTTP request handling
- Key classes:
  - CustomHTTPRequestHandler: Main request handler
- Key methods:
  - do_GET(): Handles GET requests
  - do_POST(): Handles POST requests
  - handle_chat_post(): Processes chat messages
- Dependencies: http.server
- Core server component

log.html.py:
- Main purpose: Generates log reports
- Key functions:
  - generate_html(): Creates log page
  - extract_metadata(): Gets message metadata
- Dependencies: git, gnupg
- Used by: http_handler.py for logs

make_outliner_prompt.py:
- Main purpose: Creates AI prompts
- Similar to compile_prompt.py but for outlines
- Dependencies: os, re
- Used by: Development tools

server.py:
- Main purpose: HTTP server implementation
- Key functions:
  - run_server(): Starts HTTP server
- Dependencies: socketserver
- Entry point for web server

start_server.py:
- Main purpose: Server startup script
- Key functions:
  - main(): Parses args and starts server
- Dependencies: argparse
- Main executable

utils.py:
- Main purpose: Utility functions
- Key functions:
  - is_port_in_use(): Checks port availability
  - find_available_port(): Finds open port
  - generate_title(): Creates message titles
- Used by: Multiple files

CSS Outline:

template/css/base.css:
- Core layout and typography styles
- Classes: .chat-container
- Tags: body
- Defines base container structure and responsive layout
- Dependencies: Used by all templates

template/css/forms.css:
- Message input form styling
- Classes: .message-form, .main-input, .send-button, .optional-fields, .form-controls, .form-toggle
- Tags: textarea, input, button
- Handles form layout, input styling, button states
- Dark mode support
- Dependencies: Used by message input components

template/css/header.css:
- Header and channel navigation styling
- Classes: .chat-header, .channel-section, .channel-nav, .channel-link, .search-section
- Tags: h1, p
- Gradient header background
- Channel navigation with horizontal scroll
- Search input styling
- Dark mode support
- Dependencies: Used by header and navigation components

template/css/messages.css:
- Message display and interaction styling
- Classes: .chat-messages, .message, .message-header, .author, .timestamp, .message-content, .hashtags, .reply-button
- Message layout, hover effects
- Reply functionality styling
- Dependencies: Used by message list components

template/css/responsive.css:
- Mobile-first responsive design rules
- Media queries for different screen sizes
- Dark mode color scheme
- Classes: Modifies existing component classes for responsive behavior
- Handles layout changes for mobile devices
- Dependencies: Applied globally across all components

Key Relationships:
- base.css provides foundation styles used by all other CSS files
- All CSS files include dark mode support via media queries
- responsive.css contains overrides that should be loaded last
- Forms and messages styling closely integrated for reply functionality
- Header styles coordinate with channel navigation and search components

HTML Outline:

template/html/chat_message.html:
- Template for individual chat message display
- Structure: message container with header, content, hashtags, reply button
- Dynamic elements: {author}, {content}, {message_id}, {hashtags}, {reply_class}, {reply_to}
- Dependencies: messages.css for styling, chat.js for reply functionality
- Used by: chat_page.html

template/html/chat_message_form.html:
- Template for message input form
- Components: textarea for message, author input, tags input, hidden fields
- Dynamic elements: {current_channel}
- Form submission to /post endpoint
- Dependencies: forms.css for styling
- Used by: chat_page.html

template/html/chat_page.html:
- Main chat interface template
- Structure: header, channel section, messages area, message form
- CSS dependencies: base.css, header.css, forms.css, messages.css, responsive.css
- Dynamic elements: {title}, {message_count}, {current_time}, {channel_nav}, {chat_messages}, {message_form}
- Includes search functionality
- Responsive design support
- Parent template that includes chat_message.html and chat_message_form.html

template/html/index.html:
- Landing page template
- Contains embedded CSS styles
- Features:
  - Responsive design
  - Dark mode support
  - Navigation menu
  - Welcome message and feature list
- Links to chat.html and log.html
- Self-contained styling without external CSS dependencies
- Mobile-friendly layout
- Color scheme: blue/white (light mode), dark blue/gray (dark mode)

JavaScript Outline:

template/js/chat.js
- Main JavaScript file for chat functionality
- Dependencies: None (vanilla JavaScript)
- Event Handlers:
  - DOMContentLoaded: Initializes form controls and search functionality
  - Form submit handler for message posting
  - Search input handler with debouncing
  - Form control toggle handlers

Functions:
- initializeFormControls()
  - Sets up form toggle buttons
  - Manages optional fields visibility
  - Handles author name persistence in localStorage
  - Initializes form controls and preferences

- postMessage(event)
  - Handles message submission
  - Validates input
  - Sends POST request to /post endpoint
  - Manages loading states
  - Handles success/error responses
  - Clears form after successful submission

- debounce(func, wait)
  - Utility function for debouncing function calls
  - Used for search functionality

- replyToMessage(messageId, author)
  - Handles reply functionality
  - Sets reply_to field
  - Adds @mention to message content

Key Features:
- Message posting
- Form field persistence
- Search functionality
- Reply system
- Optional fields toggle
- Error handling
- Loading states

DOM Elements Used:
- #post-form
- #message-search
- .message
- .message-content
- .author
- .hashtags
- .optional-fields
- .form-controls

Local Storage Usage:
- showOptionalFields
- authorName

API Endpoints Used:
- POST /post

This file would need to be modified for:
- Adding real-time updates
- Implementing message editing/deletion
- Adding reactions/emoji support
- Adding message threading
- Implementing file attachments
- Adding channel support
- Enhancing search functionality

